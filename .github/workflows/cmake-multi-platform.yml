# This workflow builds the Orcha project on multiple platforms using CMake and vcpkg.

name: Build Orcha

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Clone vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git ${{ github.workspace }}/vcpkg

    - name: Bootstrap vcpkg (Unix)
      if: runner.os != 'Windows'
      run: ./bootstrap-vcpkg.sh
      working-directory: ${{ github.workspace }}/vcpkg
      shell: bash

    - name: Bootstrap vcpkg (Windows)
      if: runner.os == 'Windows'
      run: .\bootstrap-vcpkg.bat
      working-directory: ${{ github.workspace }}\vcpkg
      shell: cmd

    - name: Install autotools on Ubuntu
      if: runner.os != 'Windows'
      run: sudo apt-get update && sudo apt-get install -y autoconf automake libtool m4

    - name: Patch vcpkg.json for libbacktrace on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo import json > patch.py
        echo with open^("src/orcha/vcpkg.json"^, ^"r+^"^) as f: >> patch.py
        echo     data = json.load^(f^) >> patch.py
        echo     deps = data.get^("dependencies"^, []^) >> patch.py
        echo     for i in range^(len^(deps^)^): >> patch.py
        echo         dep = deps[i] >> patch.py
        echo         if isinstance^(dep^, str^) and dep == ^"libbacktrace^": >> patch.py
        echo             deps[i] = ^{^"name^": ^"libbacktrace^"^, ^"platform^": ^"!windows^"^} >> patch.py
        echo         elif isinstance^(dep^, dict^) and dep.get^("name"^) == ^"libbacktrace^": >> patch.py
        echo             dep[^"platform^"] = ^"!windows^" >> patch.py
        echo     f.seek^(0^) >> patch.py
        echo     json.dump^(data^, f^, indent=4^) >> patch.py
        echo     f.truncate^() >> patch.py
        python patch.py

    - name: Patch vcpkg.json for dlfcn-win32 on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo import json > patch_dl.py
        echo with open^("src/orcha/vcpkg.json"^, ^"r+^"^) as f: >> patch_dl.py
        echo     data = json.load^(f^) >> patch_dl.py
        echo     deps = data.get^("dependencies"^, []^) >> patch_dl.py
        echo     deps.append(^{^"name^": ^"dlfcn-win32^"^, ^"platform^": ^"windows^"^}) >> patch_dl.py
        echo     f.seek^(0^) >> patch_dl.py
        echo     json.dump^(data^, f^, indent=4^) >> patch_dl.py
        echo     f.truncate^() >> patch_dl.py
        python patch_dl.py

    - name: Patch Logger.cpp for missing includes
      run: |
        cat <<EOF > patch_logger.py
        import sys
        file = 'src/orcha/utils/Logger.cpp'
        with open(file, 'r') as f:
            lines = f.readlines()
        has_fs = any('<filesystem>' in l for l in lines)
        has_iom = any('<iomanip>' in l for l in lines)
        if not has_fs or not has_iom:
            with open(file, 'w') as f:
                if not has_fs:
                    f.write('#include <filesystem>\n')
                if not has_iom:
                    f.write('#include <iomanip>\n')
                f.writelines(lines)
        EOF
        python patch_logger.py
      shell: bash

    - name: Patch main.cpp for missing includes
      run: |
        cat <<EOF > patch_main.py
        import sys
        file = 'src/orcha/main.cpp'
        with open(file, 'r') as f:
            lines = f.readlines()
        has_fs = any('<filesystem>' in l for l in lines)
        if not has_fs:
            with open(file, 'w') as f:
                if not has_fs:
                    f.write('#include <filesystem>\n')
                f.writelines(lines)
        EOF
        python patch_main.py
      shell: bash

    - name: Patch PowerShellDownloader.cpp for cpprest on Windows
      if: runner.os == 'Windows'
      run: |
        cat <<EOF > patch_psd.py
        import sys
        import re
        file = 'src/orcha/commands/PowerShellDownloader/PowerShellDownloader.cpp'
        with open(file, 'r') as f:
            content = f.read()
        content = content.replace('<cpprest/basic_utils.h>', '<cpprest/asyncrt_utils.h>')
        if '<cpprest/asyncrt_utils.h>' not in content:
            content = content.replace('#include <cpprest/filestream.h>', '#include <cpprest/filestream.h>\n#include <cpprest/asyncrt_utils.h>')
        content = content.replace('open_ostream(ps_archive', 'open_ostream(utility::conversions::to_string_t(ps_archive)')
        content = re.sub(r'json::value::string\s*\(', r'json::value(', content)
        content = content.replace('json::value(true)', 'json::value::boolean(true)')
        content = content.replace('json::value(false)', 'json::value::boolean(false)')
        with open(file, 'w') as f:
            f.write(content)
        EOF
        python patch_psd.py
      shell: bash

    - name: Patch WorkflowRunner.cpp for cpprest on Windows
      if: runner.os == 'Windows'
      run: |
        cat <<EOF > patch_wf.py
        import sys
        import re
        file = 'src/orcha/workflow/WorkflowRunner.cpp'
        with open(file, 'r') as f:
            content = f.read()
        if '<cpprest/asyncrt_utils.h>' not in content:
            content = content.replace('#include <pplx/pplxtasks.h>', '#include <pplx/pplxtasks.h>\n#include <cpprest/asyncrt_utils.h>')
        content = content.replace('std::string cmd_name = step.at(U("command")).as_string();', 'std::string cmd_name = utility::conversions::to_utf8string(step.at(U("command")).as_string());')
        content = content.replace('json::value::string("No \'steps\' defined in YAML.")', 'json::value(U("No \'steps\' defined in YAML."))')
        content = content.replace('json::value::string("No \'steps\' array in JSON.")', 'json::value(U("No \'steps\' array in JSON."))')
        content = re.sub(r'json::value::string\s*\(', r'json::value(utility::conversions::to_string_t(', content)
        content = content.replace('json::value(false)', 'json::value::boolean(false)')
        content = content.replace('json::value(true)', 'json::value::boolean(true)')
        with open(file, 'w') as f:
            f.write(content)
        EOF
        python patch_wf.py
      shell: bash

    - name: Patch YamlToJson.hpp for cpprest on Windows
      if: runner.os == 'Windows'
      run: |
        cat <<EOF > patch_yaml.py
        import sys
        import re
        file = 'src/orcha/utils/YamlToJson.hpp'
        with open(file, 'r') as f:
            content = f.read()
        if '<cpprest/asyncrt_utils.h>' not in content:
            content = content.replace('#include <yaml-cpp/yaml.h>', '#include <yaml-cpp/yaml.h>\n#include <cpprest/asyncrt_utils.h>')
        content = re.sub(r'json::value::string\s*\(', r'json::value(utility::conversions::to_string_t(', content)
        with open(file, 'w') as f:
            f.write(content)
        EOF
        python patch_yaml.py
      shell: bash

    - name: Patch CommandRegistry.cpp for dlfcn on Windows
      if: runner.os == 'Windows'
      run: |
        cat <<EOF > patch_cr.py
        import sys
        file = 'src/orcha/core/CommandRegistry.cpp'
        with open(file, 'r') as f:
            content = f.read()
        content = content.replace('#include "dlfcn.h"', '#include <dlfcn.h>')
        with open(file, 'w') as f:
            f.write(content)
        EOF
        python patch_cr.py
      shell: bash

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_CXX_STANDARD_REQUIRED=ON
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}/src/orcha

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest -C ${{ matrix.build_type }}
