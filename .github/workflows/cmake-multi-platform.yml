# This workflow builds the Orcha project on multiple platforms using CMake and vcpkg.

name: Build Orcha

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Clone vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git ${{ github.workspace }}/vcpkg

    - name: Bootstrap vcpkg (Unix)
      if: runner.os != 'Windows'
      run: ./bootstrap-vcpkg.sh
      working-directory: ${{ github.workspace }}/vcpkg
      shell: bash

    - name: Bootstrap vcpkg (Windows)
      if: runner.os == 'Windows'
      run: .\bootstrap-vcpkg.bat
      working-directory: ${{ github.workspace }}\vcpkg
      shell: cmd

    - name: Install autotools on Ubuntu
      if: runner.os != 'Windows'
      run: sudo apt-get update && sudo apt-get install -y autoconf automake libtool m4

    - name: Patch vcpkg.json for libbacktrace on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo import json > patch.py
        echo with open^("src/orcha/vcpkg.json"^, ^"r+^"^) as f: >> patch.py
        echo     data = json.load^(f^) >> patch.py
        echo     deps = data.get^("dependencies"^, []^) >> patch.py
        echo     for i in range^(len^(deps^)^): >> patch.py
        echo         dep = deps[i] >> patch.py
        echo         if isinstance^(dep^, str^) and dep == ^"libbacktrace^": >> patch.py
        echo             deps[i] = ^{^"name^": ^"libbacktrace^"^, ^"platform^": ^"!windows^"^} >> patch.py
        echo         elif isinstance^(dep^, dict^) and dep.get^("name"^) == ^"libbacktrace^": >> patch.py
        echo             dep[^"platform^"] = ^"!windows^" >> patch.py
        echo     f.seek^(0^) >> patch.py
        echo     json.dump^(data^, f^, indent=4^) >> patch.py
        echo     f.truncate^() >> patch.py
        python patch.py

    - name: Patch Logger.cpp for missing includes
      run: |
        python -c "import sys; file = 'src/orcha/utils/Logger.cpp'; with open(file, 'r') as f: lines = f.readlines(); has_fs = any('<filesystem>' in l for l in lines); has_iom = any('<iomanip>' in l for l in lines); added = (not has_fs) or (not has_iom); if added: with open(file, 'w') as f: if not has_fs: f.write('#include <filesystem>\n'); if not has_iom: f.write('#include <iomanip>\n'); f.writelines(lines)"
      shell: bash

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}/src/orcha

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest -C ${{ matrix.build_type }}
